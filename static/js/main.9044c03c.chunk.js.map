{"version":3,"sources":["assets/images/illustration.svg","assets/images/logo.svg","assets/images/google-icon.svg","Components/Button.tsx","services/firebase.ts","contexts/AuthContexts.tsx","hooks/useAuth.ts","pages/Home.tsx","pages/NewRoom.tsx","assets/images/copy.svg","Components/RoomCode.tsx","pages/Room.tsx","App.tsx","index.tsx"],"names":["Button","props","className","firebaseConfig","apiKey","process","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_APP_ID","firebase","initializeApp","auth","database","AuthContext","createContext","AuthContextProvider","useState","user","setUser","a","provider","GoogleAuthProvider","signInWithPopup","result","displayName","photoURL","uid","Error","id","name","avatar","useEffect","unsubscribe","onAuthStateChanged","Provider","value","signInWithGoogle","children","useAuth","useContext","Home","history","useHistory","roomCode","setRoomCode","push","event","preventDefault","trim","ref","get","exists","alert","src","illustrationImg","alt","logoImg","onClick","googleIconImg","onSubmit","type","placeholder","onChange","target","NewRoom","newRoom","setNewRoom","roomRef","title","authorId","firebaseRoom","key","to","RoomCode","navigator","clipboard","writeText","code","copyImg","Room","params","useParams","newQuestion","setNewQuestion","questions","setQuestions","setTitle","roomID","question","content","author","isHighlighted","isAnswered","on","room","databaseRoom","val","firebaseQuestions","parsedQuestions","Object","entries","map","length","disabled","JSON","stringify","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9044c03c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/illustration.8aeb45a4.svg\";","export default __webpack_public_path__ + \"static/media/logo.3cce2a2f.svg\";","export default __webpack_public_path__ + \"static/media/google-icon.0dd78068.svg\";","import { ButtonHTMLAttributes } from 'react'\r\n\r\nimport '../styles/button.scss';\r\n\r\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>\r\n\r\nexport function Button(props: ButtonProps) {\r\n  return (\r\n    <button className=\"button\" {...props} />\r\n  )\r\n}\r\n\r\n\r\n","import firebase from \"firebase/app\";\r\n\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst auth = firebase.auth();\r\nconst database = firebase.database();\r\n\r\nexport { firebase, auth, database }","import { createContext, ReactNode, useState, useEffect } from \"react\";\r\n\r\nimport { auth, firebase } from \"../services/firebase\"\r\n\r\n\r\n\r\ntype User = {\r\n  id: string;\r\n  name: string;\r\n  avatar: string;\r\n}\r\n\r\ntype AuthContextType = {\r\n  user: User | undefined;\r\n  signInWithGoogle: () => Promise<void>;\r\n}\r\n\r\ntype AuthContextProviderProps = {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthContext = createContext({} as AuthContextType);\r\n\r\nexport function AuthContextProvider(props: AuthContextProviderProps) {\r\n  const [user, setUser] = useState<User>();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(user => {\r\n      if (user) {\r\n        const { displayName, photoURL, uid } = user\r\n\r\n        if (!displayName || !photoURL) {\r\n          throw new Error('Missing information from Google Account.')\r\n        }\r\n\r\n        setUser({\r\n          id: uid,\r\n          name: displayName,\r\n          avatar: photoURL\r\n        })\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    }\r\n  }, [])\r\n\r\n  async function signInWithGoogle() {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n    const result = await auth.signInWithPopup(provider);\r\n\r\n\r\n    if (result.user) {\r\n      const { displayName, photoURL, uid } = result.user\r\n\r\n      if (!displayName || !photoURL) {\r\n        throw new Error('Missing information from Google Account.')\r\n      }\r\n\r\n      setUser({\r\n        id: uid,\r\n        name: displayName,\r\n        avatar: photoURL\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, signInWithGoogle }} >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n}","import { useContext } from 'react'\r\nimport { AuthContext } from '../contexts/AuthContexts'\r\n\r\nexport function useAuth() {\r\n  const value = useContext(AuthContext)\r\n\r\n  return value;\r\n}","import { useHistory } from 'react-router-dom'\r\n\r\nimport illustrationImg from '../assets/images/illustration.svg';\r\nimport logoImg from '../assets/images/logo.svg';\r\nimport googleIconImg from '../assets/images/google-icon.svg';\r\n\r\nimport { Button } from '../Components/Button';\r\nimport { useAuth } from '../hooks/useAuth';\r\n\r\n//webpack (snowpack, vite, ...)\r\n\r\nimport '../styles/auth.scss';\r\nimport { FormEvent, useState } from 'react';\r\nimport { database } from '../services/firebase';\r\n\r\nexport function Home() {\r\n  const history = useHistory();\r\n  const { user, signInWithGoogle } = useAuth();\r\n  const [roomCode, setRoomCode] = useState('');\r\n\r\n  async function handleCreateRoom() {\r\n    if (!user) {\r\n      await signInWithGoogle();\r\n    }\r\n\r\n    history.push('/rooms/new');\r\n  }\r\n\r\n  async function handleJoinRoom(event: FormEvent) {\r\n    event.preventDefault();\r\n\r\n    if (roomCode.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    const roomRef = await database.ref(`rooms/${roomCode}`).get();\r\n\r\n    if (!roomRef.exists()) {\r\n      alert('Room does not exists.');\r\n      return;\r\n    }\r\n\r\n    history.push(`/rooms/${roomCode}`)\r\n  }\r\n\r\n  return (\r\n    <div id=\"page-auth\">\r\n      <aside>\r\n        <img src={illustrationImg} alt=\"Ilustração simbolizando pergunta e resposta\" />\r\n        <strong>Crie salas de Q&amp;A ao-vivo</strong>\r\n        <p>Tire as dúvidas da sua audiência em tempo-real</p>\r\n      </aside>\r\n      <main>\r\n        <div className=\"main-content\">\r\n          <img src={logoImg} alt=\"LetMeAsk\" />\r\n          <button onClick={handleCreateRoom} className=\"create-room\">\r\n            <img src={googleIconImg} alt=\"Logo do Google\" />\r\n            Crie sua sala com o Google\r\n          </button>\r\n          <div className=\"separator\">ou entre na sala</div>\r\n          <form onSubmit={handleJoinRoom}>\r\n            <input type=\"text\"\r\n              placeholder=\"Digite o código da sala\"\r\n              onChange={event => setRoomCode(event.target.value)}\r\n              value={roomCode}\r\n            />\r\n            <Button type=\"submit\">\r\n              Entrar na sala\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n","// import { useContext } from 'react';\r\nimport { FormEvent, useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\n\r\nimport illustrationImg from '../assets/images/illustration.svg';\r\nimport logoImg from '../assets/images/logo.svg';\r\n\r\nimport { Button } from '../Components/Button';\r\nimport { database } from '../services/firebase';\r\nimport { useAuth } from '../hooks/useAuth';\r\n\r\n//webpack (snowpack, vite, ...)\r\n\r\nimport '../styles/auth.scss';\r\n\r\nexport function NewRoom() {\r\n  const { user } = useAuth();\r\n  const history = useHistory();\r\n  const [newRoom, setNewRoom] = useState('');\r\n\r\n  async function handleCreateRoom(event: FormEvent) {\r\n    event.preventDefault();\r\n\r\n    if (newRoom.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    const roomRef = database.ref('rooms');\r\n\r\n    const firebaseRoom = await roomRef.push({\r\n      title: newRoom,\r\n      authorId: user?.id,\r\n    });\r\n\r\n    history.push(`/rooms/${firebaseRoom.key}`)\r\n  }\r\n\r\n  return (\r\n    <div id=\"page-auth\">\r\n      <aside>\r\n        <img src={illustrationImg} alt=\"Ilustração simbolizando pergunta e resposta\" />\r\n        <strong>Crie salas de Q&amp;A ao-vivo</strong>\r\n        <p>Tire as dúvidas da sua audiência em tempo-real</p>\r\n      </aside>\r\n      <main>\r\n        <div className=\"main-content\">\r\n          <img src={logoImg} alt=\"LetMeAsk\" />\r\n          <h2>Criar uma nova sala</h2>\r\n          <form onSubmit={handleCreateRoom}>\r\n            <input type=\"text\"\r\n              placeholder=\"Nome da sala\"\r\n              onChange={event => setNewRoom(event.target.value)}\r\n              value={newRoom}\r\n            />\r\n            <Button type=\"submit\">\r\n              Criar sala\r\n            </Button>\r\n          </form>\r\n          <p>Quer entrar em uma sala existente? <Link to=\"/\">clique aqui</Link></p>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/copy.b8f09a77.svg\";","import copyImg from '../assets/images/copy.svg';\r\n\r\nimport '../styles/room-code.scss';\r\n\r\ntype RoomCodeProps = {\r\n  code: string;\r\n}\r\n\r\nexport function RoomCode(props: RoomCodeProps) {\r\n  function copyRoomCodeToClipboard() {\r\n    navigator.clipboard.writeText(props.code)\r\n  }\r\n\r\n  return (\r\n    <button className=\"room-code\" onClick={copyRoomCodeToClipboard}>\r\n      <div>\r\n        <img src={copyImg} alt=\"Copy room code\" />\r\n      </div>\r\n      <span>Sala #{props.code}</span>\r\n    </button>\r\n  )\r\n}","import { useParams } from 'react-router-dom'\r\nimport { FormEvent, useEffect, useState } from 'react'\r\nimport { useAuth } from '../hooks/useAuth';\r\n\r\nimport logoImg from '../assets/images/logo.svg';\r\nimport { Button } from '../Components/Button';\r\nimport { RoomCode } from '../Components/RoomCode';\r\nimport { database } from '../services/firebase';\r\n\r\nimport '../styles/room.scss'\r\n\r\ntype FirebaseQuestions = Record<string, {\r\n  author: {\r\n    name: string;\r\n    avatar: string;\r\n  }\r\n  content: string;\r\n  isAnswered: boolean;\r\n  isHighlighted: boolean;\r\n}>\r\n\r\ntype Question = {\r\n  id: string;\r\n  author: {\r\n    name: string;\r\n    avatar: string;\r\n  }\r\n  content: string;\r\n  isAnswered: boolean;\r\n  isHighlighted: boolean;\r\n\r\n}\r\n\r\ntype RoomParams = {\r\n  id: string;\r\n}\r\n\r\nexport function Room() {\r\n  const { user } = useAuth();\r\n  const params = useParams<RoomParams>();\r\n  const [newQuestion, setNewQuestion] = useState('');\r\n  const [questions, setQuestions] = useState<Question[]>([])\r\n  const [title, setTitle] = useState('');\r\n\r\n  const roomID = params.id;\r\n\r\n  useEffect(() => {\r\n    const roomRef = database.ref(`rooms/${roomID}`)\r\n\r\n    roomRef.on('value', room => {\r\n      const databaseRoom = room.val();\r\n      const firebaseQuestions: FirebaseQuestions = databaseRoom.questions;\r\n\r\n      const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value]) => {\r\n        return {\r\n          id: key,\r\n          content: value.content,\r\n          author: value.author,\r\n          isHighlighted: value.isHighlighted,\r\n          isAnswered: value.isAnswered,\r\n        }\r\n      })\r\n\r\n      setTitle(databaseRoom.title);\r\n      setQuestions(parsedQuestions)\r\n    })\r\n  }, [roomID]);\r\n\r\n  async function handleSendQuestion(event: FormEvent) {\r\n    event.preventDefault();\r\n\r\n    if (newQuestion.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    if (!user) {\r\n      throw new Error(' You must be logged in');\r\n    }\r\n\r\n    const question = {\r\n      content: newQuestion,\r\n      author: {\r\n        name: user.name,\r\n        avatar: user.avatar,\r\n      },\r\n      isHighlighted: false,\r\n      isAnswered: false\r\n    };\r\n\r\n    await database.ref(`rooms/${roomID}/questions`).push(question);\r\n\r\n    setNewQuestion('');\r\n  }\r\n\r\n  return (\r\n    <div id=\"page-room\">\r\n      <header>\r\n        <div className=\"content\">\r\n          <img src={logoImg} alt=\"LetMeAsk\" />\r\n          <RoomCode code={params.id} />\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"content\">\r\n        <div className=\"room-title\">\r\n          <h1>Sala {title}</h1>\r\n          {questions.length > 0 && <span>{questions.length} pergunta(s)</span>}\r\n        </div>\r\n\r\n        <form onSubmit={handleSendQuestion}>\r\n          <textarea\r\n            placeholder=\"O que você quer perguntar?\"\r\n            onChange={event => setNewQuestion(event.target.value)}\r\n            value={newQuestion}\r\n          />\r\n\r\n          <div className=\"form-footer\">\r\n            {user ? (\r\n              <div className=\"user-info\">\r\n                <img src={user.avatar} alt={user.name} />\r\n                <span>{user.name}</span>\r\n              </div>\r\n            ) : (\r\n              <span>para enviar uma pergunta, <button>faça seu login</button>.</span>\r\n            )}\r\n            <Button type=\"submit\" disabled={!user}>Enviar pergunta</Button>\r\n          </div>\r\n        </form>\r\n\r\n        {JSON.stringify(questions)}\r\n      </main>\r\n    </div>\r\n  );\r\n}","import { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport { Home } from \"./pages/Home\";\r\nimport { NewRoom } from \"./pages/NewRoom\";\r\nimport { Room } from \"./pages/Room\";\r\n\r\nimport { AuthContextProvider } from './contexts/AuthContexts'\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <AuthContextProvider>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/rooms/new\" exact component={NewRoom} />\r\n          <Route path=\"/rooms/:id\" component={Room} />\r\n        </Switch>\r\n      </AuthContextProvider>\r\n    </BrowserRouter>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport './services/firebase'\r\n\r\nimport './styles/global.scss';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}